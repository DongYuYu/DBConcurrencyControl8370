
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.1
 *  @date    Tue Jan 10 14:34:43 EST 2017
 *  @see     LICENSE (MIT style license file).
 *------------------------------------------------------------------------------
 *  Instructions:
 *      Download sbt
 *      Download transactions.zip
 *      unzip transactions.zip
 *      cd transactions
 *      sbt
 *      > compile
 *      > run-main trans.ScheduleTest
 *      > exit
 */

package trans
import scalation.graphalytics.Graph
import scalation.graphalytics.Cycle.hasCycle


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Operation` object defines the 'Op' type and read (r) and write (w) operation-types.
 */
object Operation
{
    type Op = (Char, Int, Int)
    val r = 'r'
    val w = 'w'

} // Op object

import Operation._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Schedule` class represents a transaction schedule as a list of operations,
 *  where each operation is a 3-tuple (operation-type, transaction-id, data-object-id).
 */
class Schedule (s: List [Op])
{

	var white: Set[Int] = Set[Int]()
	var grey:  Set[Int] = Set[Int]()

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Determine whether this schedule is Conflict Serializable (CSR).
     *  @see www.cs.uga.edu/~jam/scalation_1.2/src/main/scala/scalation/graphalytics/Graph.scala
     *  @see www.cs.uga.edu/~jam/scalation_1.2/src/main/scala/scalation/graphalytics/Cycle.scala
     *  @param nTrans  the number of transactions in this schedule
     */
    def isCSR (nTrans: Int): Boolean =
    {
	var ret: Boolean = false;
        val ch = Array.ofDim [Set [Int]] (nTrans)
	for (i <-ch.indices) ch(i)=Set[Int]()
        for (i <- s.indices ; j<-i+1 until s.size) if( conflict( s(i),s(j) ) ) ch(s(i)._2)+= s(j)._2
        val g = new Graph(ch)
        g.printG()
	!hasCycle(g)
	
    } // isCSR
    
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /**Detect conflicts in a schedule.
     *@param op1  the first operation
     *@param op2  the second operation
     */

     def conflict(op1: Op, op2: Op): Boolean =
     
	( op1._1 == w || op2._1 == w )     &&	 
	  op1._2 != op2._2                 && 
	  op1._3 == op2._3 
     

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Determine whether this schedule is View Serializable (VSR).
     *  @param nTrans  the number of transactions in this schedule
     */
    def isVSR (nTrans: Int): Boolean =
    {
        // I M P L E M E N T
        false
    } // isVSR


    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Iterate over the schedule element by element.
     *  @param f  the function to apply
     */
    def foreach [U] (f: Op => U)
    {
        s.foreach (f)
    } // foreach

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Convert the schedule to a string.
     */
    override def toString: String =
    {
        s"Schedule ( $s )".replace ("List(", "").replace (") )", " )")
    } // toString:

} // Schedule class

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Schedule` companion object provides a method to randomly generate a schedule.
 */
object Schedule
{
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Randomly generate a schedule.
     *  @param nTrans  the number of transactions
     *  @param nOps    the number of operations per transaction
     *  @param nObjs   the number of data objects accessed
     */
    def genSchedule (nTrans: Int, nOps: Int, nObjs: Int): Schedule =
    {
	val total = nTrans * nOps
	val rand = scala.util.Random;
	var num1, num2, num3: Int = 0
		 
	val s = (for (i <- 0 until total) yield (if (rand.nextInt(2)>.5) r else w,
	      	     	     	   	  	rand.nextInt(nTrans),
						rand.nextInt(nObjs))).toList
        return new Schedule(s)
    } // genSchedule	
}

object Schedule2
{
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Randomly generate a schedule.
     *  @param nTrans  the number of transactions
     *  @param nOps    the number of operations per transaction
     *  @param nObjs   the number of data objects accessed
     */
    def genSchedule (transId: Int, nOps: Int, nObjs: Int): Schedule =
    {
	val rand = scala.util.Random;
	var num1, num2, num3: Int = 0
		 
	val s = (for (i <- 0 until nOps) yield (if (rand.nextInt(2)>.5) r else w,
	      	     	     	   	  	transId,
						rand.nextInt(nObjs))).toList
        return new Schedule(s)
    } // genSchedule	
}

import Schedule._
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ScheduleTest` object is used to test the `Schedule` class.
 *  > run-main trans.ScheduleTest
 */
object ScheduleTest extends App
{
    var schedules = Array.ofDim[Schedule](100)
    val numTrans = 3
    val rand = scala.util.Random;
    val maxOps = 5;

    for(i <- schedules.indices) schedules(i) = genSchedule(numTrans,rand.nextInt(maxOps),2);

    for(i <- schedules.indices)
    {
	//println (s"schedules(i) = $schedules(i) is CSR? ${schedules(i).isCSR (numTrans)}")
	println("schedules(i) = " + schedules(i) + " is CSR? " + schedules(i).isCSR (numTrans) )
	println ()
    }
     
} // ScheduleTest object

